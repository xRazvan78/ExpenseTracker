@page "/expenses"
@rendermode InteractiveServer
@using ExpenseTracker.Services
@using ExpenseTracker.Components.Data.Models
@inject ExpenseService ExpenseService;
@inject NavigationManager Nav   

<h3>Expenses</h3>

<select @bind="selectedFilter" style="margin-bottom: 1rem;">
    <option>All</option>
    <option>Planned</option>
    <option>Unplanned</option>
</select>

<table class="table">
	<thead>
		<tr>
			<th>Category</th>
            <th>Title</th>
            <th>Date</th>
			<th>Amount</th>
			<th>Type</th>
            <th>Actions</th>
		</tr>
	</thead>
	<tbody>
        @if (expenses.Count == 0)
        {
            <tr>
                <td colspan="5">No expenses recorded yet.</td>
            </tr>
        }
        else
        {
            @foreach (var expense in FilteredExpenses)
            {
                <tr>
                    <td>@expense.Category?.Name</td>
                    <td>@expense.Title</td>
                    <td>@expense.Date.ToString("dd MMM yyyy")</td>
                    <td>@expense.Amount.ToString("C")</td>
                    <td>@expense.Planned.ToString()</td>
                    <td>
                        <button style="background-color: dodgerblue" @onclick="() => EditExpense(expense.Id)">Edit</button>
                        <button style="background-color: crimson" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
	</tbody>
</table>
<button style="background-color: lawngreen" @onclick="NavigateToAddExpense">Add Expense</button>

<h4>Total Expense</h4>
<p style="font-size: 1.5rem; color: crimson;">
    @FilteredExpenses.Sum(e => e.Amount).ToString("C")
</p>



@code {
    private List<Expense> expenses = new();

    private string selectedFilter = "All";
    private List<Expense> allExpenses = new();
    private List<Expense> FilteredExpenses =>
        selectedFilter switch
        {
            "Planned" => allExpenses.Where(e => e.Planned == PlannedType.Planned).ToList(),
            "Unplanned" => allExpenses.Where(e => e.Planned == PlannedType.Unplanned).ToList(),
            _ => allExpenses
        };


    protected override void OnInitialized()
    {
        expenses = ExpenseService.GetExpenses(); 
        allExpenses = ExpenseService.GetExpenses();
    }

    void NavigateToAddExpense()
    {
        Nav.NavigateTo("/expenses/new");
    }

    void DeleteExpense(int id)
    {
        ExpenseService.DeleteExpense(id);
        allExpenses = ExpenseService.GetExpenses();
    }
    void EditExpense(int id)
    {
        Nav.NavigateTo($"/expenses/{id}");
    }

}

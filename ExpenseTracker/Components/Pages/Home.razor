@page "/"
@rendermode InteractiveServer
@using ExpenseTracker.Services
@using ExpenseTracker.Components.Data.Models
@inject ExpenseService ExpenseService
@inject IncomeService IncomeService

<PageTitle>Home</PageTitle>

<h1>Expense Tracker</h1>


<h4>Balance</h4>
<p style="font-size : 2rem;  color:@(balance >= 0 ? "green" : "red")">@balance.ToString("C")</p>
<div style="display: flex; gap: 2rem;">
	<div >
		<h4 style="color : dodgerblue ">Incomes</h4>
		<h5 style=" color:grey">(@firstIncomeDate.ToString("dd MMM yyyy") – @lastIncomeDate.ToString("dd MMM yyyy"))</h5>
		<p style="font-size : 2rem; ">@totalIncome.ToString("C")</p>

		<h4 style="color:grey">Current Month</h4>
		<p style="font-size : 2rem;">@currentMonthIncome.ToString("C")</p>
	</div>

	<div>
		<h4 style="color: dodgerblue ">Expenses</h4>
		<h5 style=" color: grey">(@firstExpenseDate.ToString("dd MMM yyyy") – @lastExpenseDate.ToString("dd MMM yyyy"))</h5>
		<p style="font-size : 2rem;">@totalExpense.ToString("C")</p>

		<h4 style="color: grey">Current Month</h4>
		<p style="font-size : 2rem;">@currentMonthExpense.ToString("C")</p>
	</div>

	<div>
		<h4 style="color :blue">Planned Expenses</h4>
		<p style="font-size: 2rem;">@totalPlannedExpenses.ToString("C")</p>
	</div>

	<div>
		<h4 style="color: red">Unplanned Expenses</h4>
		<p style=" font-size: 2rem;">@totalUnplannedExpenses.ToString("C")</p>
	</div>
</div>



@code {

	private List<Income> incomes = new();
	private List<Expense> expenses = new();

	private decimal totalIncome;
	private decimal totalExpense;
	private decimal currentMonthIncome;
	private decimal currentMonthExpense;
	private decimal balance;
	private decimal totalPlannedExpenses;
	private decimal totalUnplannedExpenses;

	private DateTime firstIncomeDate;
	private DateTime lastIncomeDate;
	private DateTime firstExpenseDate;
	private DateTime lastExpenseDate;

	protected override void OnInitialized()
	{
		incomes = IncomeService.GetIncomes();
		expenses = ExpenseService.GetExpenses();

		totalIncome = incomes.Sum(i => i.Amount);
		totalExpense = expenses.Sum(e => e.Amount);
		balance = totalIncome - totalExpense;
		totalPlannedExpenses = expenses
								.Where(e => e.Planned == PlannedType.Planned)
								.Sum(e => e.Amount);
		totalUnplannedExpenses = expenses
								.Where(e => e.Planned == PlannedType.Unplanned)
								.Sum(e => e.Amount);

		var today = DateTime.Now;

		currentMonthIncome = incomes
							.Where(i => i.Date.Month == today.Date.Month && i.Date.Year == today.Date.Year)
							.Sum(i => i.Amount);

		currentMonthExpense = expenses
							.Where(e => e.Date.Month == today.Date.Month && e.Date.Year == today.Date.Year)
							.Sum(e => e.Amount);

		if(incomes.Count > 0)
		{
			var sort = incomes.OrderBy(i => i.Date).ToList();
			firstIncomeDate = sort.First().Date;
			lastIncomeDate = sort.Last().Date;

		}

		if(expenses.Count > 0)
		{
			var sort = expenses.OrderBy(e => e.Date).ToList();
			firstExpenseDate = sort.First().Date;
			lastExpenseDate = sort.Last().Date;
		}

		


	}

}